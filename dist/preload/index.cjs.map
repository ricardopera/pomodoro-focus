{
  "version": 3,
  "sources": ["../../src/preload/index.ts", "../../src/shared/constants.ts"],
  "sourcesContent": ["import { contextBridge, ipcRenderer } from 'electron';\nimport { IPC_CHANNELS } from '../shared/constants';\nimport type { AppState, Settings, Session, Statistics } from '../shared/types';\n\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // Settings API\n  settings: {\n    get: (): Promise<Settings> => ipcRenderer.invoke(IPC_CHANNELS.SETTINGS_GET),\n    update: (partial: Partial<Settings>): Promise<Settings> =>\n      ipcRenderer.invoke(IPC_CHANNELS.SETTINGS_UPDATE, partial),\n    reset: (): Promise<Settings> => ipcRenderer.invoke(IPC_CHANNELS.SETTINGS_RESET),\n    onChange: (callback: (settings: Settings) => void) => {\n      const listener = (_event: Electron.IpcRendererEvent, settings: Settings) => callback(settings);\n      ipcRenderer.on(IPC_CHANNELS.SETTINGS_CHANGED, listener);\n      return () => ipcRenderer.removeListener(IPC_CHANNELS.SETTINGS_CHANGED, listener);\n    },\n  },\n\n  // Timer API\n  timer: {\n    start: (type: 'focus' | 'break-short' | 'break-long'): Promise<AppState> =>\n      ipcRenderer.invoke(IPC_CHANNELS.TIMER_START, type),\n    pause: (): Promise<AppState> => ipcRenderer.invoke(IPC_CHANNELS.TIMER_PAUSE),\n    resume: (): Promise<AppState> => ipcRenderer.invoke(IPC_CHANNELS.TIMER_RESUME),\n    reset: (): Promise<AppState> => ipcRenderer.invoke(IPC_CHANNELS.TIMER_RESET),\n    onTick: (callback: (state: AppState) => void) => {\n      const listener = (_event: Electron.IpcRendererEvent, state: AppState) => callback(state);\n      ipcRenderer.on(IPC_CHANNELS.TIMER_TICK, listener);\n      return () => ipcRenderer.removeListener(IPC_CHANNELS.TIMER_TICK, listener);\n    },\n    onComplete: (callback: () => void) => {\n      const listener = () => callback();\n      ipcRenderer.on(IPC_CHANNELS.TIMER_COMPLETE, listener);\n      return () => ipcRenderer.removeListener(IPC_CHANNELS.TIMER_COMPLETE, listener);\n    },\n  },\n\n  // Sessions API\n  sessions: {\n    get: (): Promise<Session[]> => ipcRenderer.invoke(IPC_CHANNELS.SESSIONS_GET),\n  },\n\n  // Statistics API\n  statistics: {\n    get: (): Promise<Statistics> => ipcRenderer.invoke(IPC_CHANNELS.STATISTICS_GET),\n  },\n\n  // Window control API\n  minimize: (): void => ipcRenderer.send('window:minimize'),\n  close: (): void => ipcRenderer.send('window:close'),\n});\n\n// Type definitions for window.electronAPI\nexport interface ElectronAPI {\n  settings: {\n    get: () => Promise<Settings>;\n    update: (partial: Partial<Settings>) => Promise<Settings>;\n    reset: () => Promise<Settings>;\n    onChange: (callback: (settings: Settings) => void) => () => void;\n  };\n  timer: {\n    start: (type: 'focus' | 'break-short' | 'break-long') => Promise<AppState>;\n    pause: () => Promise<AppState>;\n    resume: () => Promise<AppState>;\n    reset: () => Promise<AppState>;\n    onTick: (callback: (state: AppState) => void) => () => void;\n    onComplete: (callback: () => void) => () => void;\n  };\n  sessions: {\n    get: () => Promise<Session[]>;\n  };\n  statistics: {\n    get: () => Promise<Statistics>;\n  };\n  minimize: () => void;\n  close: () => void;\n}\n\ndeclare global {\n  interface Window {\n    electronAPI: ElectronAPI;\n  }\n}\n", "import type { Settings } from './types';\n\n// Default settings values\nexport const DEFAULT_SETTINGS: Settings = {\n  focusDuration: 25,\n  shortBreakDuration: 5,\n  longBreakDuration: 15,\n  sessionsBeforeLongBreak: 4,\n  theme: 'system',\n  notificationsEnabled: true,\n  soundEnabled: true,\n  minimizeToTray: true,\n  autoStartBreaks: true,\n  autoStartFocus: false,\n};\n\n// Timer states\nexport const TIMER_STATES = {\n  IDLE: 'idle' as const,\n  FOCUS: 'focus' as const,\n  BREAK_SHORT: 'break-short' as const,\n  BREAK_LONG: 'break-long' as const,\n};\n\n// IPC Channel names\nexport const IPC_CHANNELS = {\n  // Settings\n  SETTINGS_GET: 'settings:get',\n  SETTINGS_UPDATE: 'settings:update',\n  SETTINGS_RESET: 'settings:reset',\n  SETTINGS_CHANGED: 'settings:changed',\n\n  // Timer\n  TIMER_START: 'timer:start',\n  TIMER_PAUSE: 'timer:pause',\n  TIMER_RESUME: 'timer:resume',\n  TIMER_RESET: 'timer:reset',\n  TIMER_TICK: 'timer:tick',\n  TIMER_COMPLETE: 'timer:complete',\n\n  // Sessions\n  SESSIONS_GET: 'sessions:get',\n  \n  // Statistics\n  STATISTICS_GET: 'statistics:get',\n} as const;\n\n// Validation constants\nexport const VALIDATION = {\n  FOCUS_DURATION_MIN: 1,\n  FOCUS_DURATION_MAX: 60,\n  SHORT_BREAK_MIN: 1,\n  SHORT_BREAK_MAX: 30,\n  LONG_BREAK_MIN: 5,\n  LONG_BREAK_MAX: 60,\n  SESSIONS_BEFORE_LONG_BREAK_MIN: 2,\n  SESSIONS_BEFORE_LONG_BREAK_MAX: 10,\n} as const;\n\n// Performance targets\nexport const PERFORMANCE = {\n  STARTUP_TARGET_MS: 200,\n  MEMORY_TARGET_MB: 100,\n  TIMER_PRECISION_TOLERANCE_MS: 2000, // \u00B12s in 25min\n} as const;\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,sBAA2C;;;ACyBpC,IAAM,eAAe;AAAA;AAAA,EAE1B,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,gBAAgB;AAAA,EAChB,kBAAkB;AAAA;AAAA,EAGlB,aAAa;AAAA,EACb,aAAa;AAAA,EACb,cAAc;AAAA,EACd,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,gBAAgB;AAAA;AAAA,EAGhB,cAAc;AAAA;AAAA,EAGd,gBAAgB;AAClB;;;ADvCA,8BAAc,kBAAkB,eAAe;AAAA;AAAA,EAE7C,UAAU;AAAA,IACR,KAAK,MAAyB,4BAAY,OAAO,aAAa,YAAY;AAAA,IAC1E,QAAQ,CAAC,YACP,4BAAY,OAAO,aAAa,iBAAiB,OAAO;AAAA,IAC1D,OAAO,MAAyB,4BAAY,OAAO,aAAa,cAAc;AAAA,IAC9E,UAAU,CAAC,aAA2C;AACpD,YAAM,WAAW,CAAC,QAAmC,aAAuB,SAAS,QAAQ;AAC7F,kCAAY,GAAG,aAAa,kBAAkB,QAAQ;AACtD,aAAO,MAAM,4BAAY,eAAe,aAAa,kBAAkB,QAAQ;AAAA,IACjF;AAAA,EACF;AAAA;AAAA,EAGA,OAAO;AAAA,IACL,OAAO,CAAC,SACN,4BAAY,OAAO,aAAa,aAAa,IAAI;AAAA,IACnD,OAAO,MAAyB,4BAAY,OAAO,aAAa,WAAW;AAAA,IAC3E,QAAQ,MAAyB,4BAAY,OAAO,aAAa,YAAY;AAAA,IAC7E,OAAO,MAAyB,4BAAY,OAAO,aAAa,WAAW;AAAA,IAC3E,QAAQ,CAAC,aAAwC;AAC/C,YAAM,WAAW,CAAC,QAAmC,UAAoB,SAAS,KAAK;AACvF,kCAAY,GAAG,aAAa,YAAY,QAAQ;AAChD,aAAO,MAAM,4BAAY,eAAe,aAAa,YAAY,QAAQ;AAAA,IAC3E;AAAA,IACA,YAAY,CAAC,aAAyB;AACpC,YAAM,WAAW,MAAM,SAAS;AAChC,kCAAY,GAAG,aAAa,gBAAgB,QAAQ;AACpD,aAAO,MAAM,4BAAY,eAAe,aAAa,gBAAgB,QAAQ;AAAA,IAC/E;AAAA,EACF;AAAA;AAAA,EAGA,UAAU;AAAA,IACR,KAAK,MAA0B,4BAAY,OAAO,aAAa,YAAY;AAAA,EAC7E;AAAA;AAAA,EAGA,YAAY;AAAA,IACV,KAAK,MAA2B,4BAAY,OAAO,aAAa,cAAc;AAAA,EAChF;AAAA;AAAA,EAGA,UAAU,MAAY,4BAAY,KAAK,iBAAiB;AAAA,EACxD,OAAO,MAAY,4BAAY,KAAK,cAAc;AACpD,CAAC;",
  "names": []
}
