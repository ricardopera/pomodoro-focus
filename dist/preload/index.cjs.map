{
  "version": 3,
  "sources": ["../../src/preload/index.ts", "../../src/shared/constants.ts"],
  "sourcesContent": ["import { contextBridge, ipcRenderer } from 'electron';\r\nimport { IPC_CHANNELS } from '../shared/constants';\r\nimport type { AppState, Settings, Session, Statistics } from '../shared/types';\r\n\r\n// Expose protected methods that allow the renderer process to use\r\n// the ipcRenderer without exposing the entire object\r\ncontextBridge.exposeInMainWorld('electronAPI', {\r\n  // Settings API\r\n  settings: {\r\n    get: (): Promise<Settings> => ipcRenderer.invoke(IPC_CHANNELS.SETTINGS_GET),\r\n    update: (partial: Partial<Settings>): Promise<Settings> =>\r\n      ipcRenderer.invoke(IPC_CHANNELS.SETTINGS_UPDATE, partial),\r\n    reset: (): Promise<Settings> => ipcRenderer.invoke(IPC_CHANNELS.SETTINGS_RESET),\r\n    onChange: (callback: (settings: Settings) => void) => {\r\n      const listener = (_event: Electron.IpcRendererEvent, settings: Settings) => callback(settings);\r\n      ipcRenderer.on(IPC_CHANNELS.SETTINGS_CHANGED, listener);\r\n      return () => ipcRenderer.removeListener(IPC_CHANNELS.SETTINGS_CHANGED, listener);\r\n    },\r\n  },\r\n\r\n  // Timer API\r\n  timer: {\r\n    start: (type: 'focus' | 'break-short' | 'break-long'): Promise<AppState> =>\r\n      ipcRenderer.invoke(IPC_CHANNELS.TIMER_START, type),\r\n    pause: (): Promise<AppState> => ipcRenderer.invoke(IPC_CHANNELS.TIMER_PAUSE),\r\n    resume: (): Promise<AppState> => ipcRenderer.invoke(IPC_CHANNELS.TIMER_RESUME),\r\n    reset: (): Promise<AppState> => ipcRenderer.invoke(IPC_CHANNELS.TIMER_RESET),\r\n    onTick: (callback: (state: AppState) => void) => {\r\n      const listener = (_event: Electron.IpcRendererEvent, state: AppState) => callback(state);\r\n      ipcRenderer.on(IPC_CHANNELS.TIMER_TICK, listener);\r\n      return () => ipcRenderer.removeListener(IPC_CHANNELS.TIMER_TICK, listener);\r\n    },\r\n    onComplete: (callback: () => void) => {\r\n      const listener = () => callback();\r\n      ipcRenderer.on(IPC_CHANNELS.TIMER_COMPLETE, listener);\r\n      return () => ipcRenderer.removeListener(IPC_CHANNELS.TIMER_COMPLETE, listener);\r\n    },\r\n  },\r\n\r\n  // Sessions API\r\n  sessions: {\r\n    get: (): Promise<Session[]> => ipcRenderer.invoke(IPC_CHANNELS.SESSIONS_GET),\r\n  },\r\n\r\n  // Statistics API\r\n  statistics: {\r\n    get: (): Promise<Statistics> => ipcRenderer.invoke(IPC_CHANNELS.STATISTICS_GET),\r\n  },\r\n\r\n  // Window control API\r\n  minimize: (): void => ipcRenderer.send('window:minimize'),\r\n  close: (): void => ipcRenderer.send('window:close'),\r\n});\r\n\r\n// Type definitions for window.electronAPI\r\nexport interface ElectronAPI {\r\n  settings: {\r\n    get: () => Promise<Settings>;\r\n    update: (partial: Partial<Settings>) => Promise<Settings>;\r\n    reset: () => Promise<Settings>;\r\n    onChange: (callback: (settings: Settings) => void) => () => void;\r\n  };\r\n  timer: {\r\n    start: (type: 'focus' | 'break-short' | 'break-long') => Promise<AppState>;\r\n    pause: () => Promise<AppState>;\r\n    resume: () => Promise<AppState>;\r\n    reset: () => Promise<AppState>;\r\n    onTick: (callback: (state: AppState) => void) => () => void;\r\n    onComplete: (callback: () => void) => () => void;\r\n  };\r\n  sessions: {\r\n    get: () => Promise<Session[]>;\r\n  };\r\n  statistics: {\r\n    get: () => Promise<Statistics>;\r\n  };\r\n  minimize: () => void;\r\n  close: () => void;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    electronAPI: ElectronAPI;\r\n  }\r\n}\r\n", "import type { Settings } from './types';\r\n\r\n// Default settings values\r\nexport const DEFAULT_SETTINGS: Settings = {\r\n  focusDuration: 25,\r\n  shortBreakDuration: 5,\r\n  longBreakDuration: 15,\r\n  sessionsBeforeLongBreak: 4,\r\n  theme: 'system',\r\n  notificationsEnabled: true,\r\n  soundEnabled: true,\r\n  minimizeToTray: true,\r\n  autoStartBreaks: true,\r\n  autoStartFocus: false,\r\n};\r\n\r\n// Timer states\r\nexport const TIMER_STATES = {\r\n  IDLE: 'idle' as const,\r\n  FOCUS: 'focus' as const,\r\n  BREAK_SHORT: 'break-short' as const,\r\n  BREAK_LONG: 'break-long' as const,\r\n};\r\n\r\n// IPC Channel names\r\nexport const IPC_CHANNELS = {\r\n  // Settings\r\n  SETTINGS_GET: 'settings:get',\r\n  SETTINGS_UPDATE: 'settings:update',\r\n  SETTINGS_RESET: 'settings:reset',\r\n  SETTINGS_CHANGED: 'settings:changed',\r\n\r\n  // Timer\r\n  TIMER_START: 'timer:start',\r\n  TIMER_PAUSE: 'timer:pause',\r\n  TIMER_RESUME: 'timer:resume',\r\n  TIMER_RESET: 'timer:reset',\r\n  TIMER_TICK: 'timer:tick',\r\n  TIMER_COMPLETE: 'timer:complete',\r\n\r\n  // Sessions\r\n  SESSIONS_GET: 'sessions:get',\r\n  \r\n  // Statistics\r\n  STATISTICS_GET: 'statistics:get',\r\n} as const;\r\n\r\n// Validation constants\r\nexport const VALIDATION = {\r\n  FOCUS_DURATION_MIN: 1,\r\n  FOCUS_DURATION_MAX: 60,\r\n  SHORT_BREAK_MIN: 1,\r\n  SHORT_BREAK_MAX: 30,\r\n  LONG_BREAK_MIN: 5,\r\n  LONG_BREAK_MAX: 60,\r\n  SESSIONS_BEFORE_LONG_BREAK_MIN: 2,\r\n  SESSIONS_BEFORE_LONG_BREAK_MAX: 10,\r\n} as const;\r\n\r\n// Performance targets\r\nexport const PERFORMANCE = {\r\n  STARTUP_TARGET_MS: 200,\r\n  MEMORY_TARGET_MB: 100,\r\n  TIMER_PRECISION_TOLERANCE_MS: 2000, // \u00B12s in 25min\r\n} as const;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,sBAA2C;;;ACyBpC,IAAM,eAAe;AAAA;AAAA,EAE1B,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,gBAAgB;AAAA,EAChB,kBAAkB;AAAA;AAAA,EAGlB,aAAa;AAAA,EACb,aAAa;AAAA,EACb,cAAc;AAAA,EACd,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,gBAAgB;AAAA;AAAA,EAGhB,cAAc;AAAA;AAAA,EAGd,gBAAgB;AAClB;;;ADvCA,8BAAc,kBAAkB,eAAe;AAAA;AAAA,EAE7C,UAAU;AAAA,IACR,KAAK,MAAyB,4BAAY,OAAO,aAAa,YAAY;AAAA,IAC1E,QAAQ,CAAC,YACP,4BAAY,OAAO,aAAa,iBAAiB,OAAO;AAAA,IAC1D,OAAO,MAAyB,4BAAY,OAAO,aAAa,cAAc;AAAA,IAC9E,UAAU,CAAC,aAA2C;AACpD,YAAM,WAAW,CAAC,QAAmC,aAAuB,SAAS,QAAQ;AAC7F,kCAAY,GAAG,aAAa,kBAAkB,QAAQ;AACtD,aAAO,MAAM,4BAAY,eAAe,aAAa,kBAAkB,QAAQ;AAAA,IACjF;AAAA,EACF;AAAA;AAAA,EAGA,OAAO;AAAA,IACL,OAAO,CAAC,SACN,4BAAY,OAAO,aAAa,aAAa,IAAI;AAAA,IACnD,OAAO,MAAyB,4BAAY,OAAO,aAAa,WAAW;AAAA,IAC3E,QAAQ,MAAyB,4BAAY,OAAO,aAAa,YAAY;AAAA,IAC7E,OAAO,MAAyB,4BAAY,OAAO,aAAa,WAAW;AAAA,IAC3E,QAAQ,CAAC,aAAwC;AAC/C,YAAM,WAAW,CAAC,QAAmC,UAAoB,SAAS,KAAK;AACvF,kCAAY,GAAG,aAAa,YAAY,QAAQ;AAChD,aAAO,MAAM,4BAAY,eAAe,aAAa,YAAY,QAAQ;AAAA,IAC3E;AAAA,IACA,YAAY,CAAC,aAAyB;AACpC,YAAM,WAAW,MAAM,SAAS;AAChC,kCAAY,GAAG,aAAa,gBAAgB,QAAQ;AACpD,aAAO,MAAM,4BAAY,eAAe,aAAa,gBAAgB,QAAQ;AAAA,IAC/E;AAAA,EACF;AAAA;AAAA,EAGA,UAAU;AAAA,IACR,KAAK,MAA0B,4BAAY,OAAO,aAAa,YAAY;AAAA,EAC7E;AAAA;AAAA,EAGA,YAAY;AAAA,IACV,KAAK,MAA2B,4BAAY,OAAO,aAAa,cAAc;AAAA,EAChF;AAAA;AAAA,EAGA,UAAU,MAAY,4BAAY,KAAK,iBAAiB;AAAA,EACxD,OAAO,MAAY,4BAAY,KAAK,cAAc;AACpD,CAAC;",
  "names": []
}
