{
  "version": 3,
  "sources": ["../../src/main/index.ts", "../../src/main/ipc.ts", "../../src/shared/constants.ts", "../../src/main/store.ts", "../../src/main/timer.ts", "../../src/main/statistics.ts", "../../src/main/tray.ts"],
  "sourcesContent": ["import { app, BrowserWindow, ipcMain } from 'electron';\r\nimport path from 'path';\r\nimport { setupIpcHandlers, cleanupIpcHandlers } from './ipc';\r\nimport { createTray, destroyTray } from './tray';\r\nimport { getSettings } from './store';\r\n\r\nlet mainWindow: BrowserWindow | null = null;\r\nlet isQuitting = false;\r\n\r\n// Verbose logging only in development\r\nconst isDev = process.env.NODE_ENV !== 'production';\r\n\r\nif (isDev) {\r\n  app.commandLine.appendSwitch('enable-logging');\r\n  app.commandLine.appendSwitch('v', '1');\r\n}\r\n\r\n// Disable GPU to prevent renderer crashes on some Windows systems\r\napp.commandLine.appendSwitch('disable-gpu');\r\napp.commandLine.appendSwitch('disable-software-rasterizer');\r\n\r\n// Handle uncaught exceptions\r\nprocess.on('uncaughtException', (error) => {\r\n  console.error('[MAIN] Uncaught Exception:', error);\r\n});\r\n\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  console.error('[MAIN] Unhandled Rejection at:', promise, 'reason:', reason);\r\n});\r\n\r\napp.on('will-quit', () => {\r\n  console.log('[MAIN] will-quit event');\r\n});\r\n\r\napp.on('quit', () => {\r\n  console.log('[MAIN] quit event');\r\n  ipcMain.removeAllListeners();\r\n});\r\n\r\nfunction createWindow(): BrowserWindow {\r\n  console.log('[MAIN] Creating window...');\r\n  const settings = getSettings();\r\n  console.log('[MAIN] Settings loaded:', settings);\r\n\r\n  // Create app icon\r\n  const iconPath = app.isPackaged\r\n    ? path.join(process.resourcesPath, 'icons', 'app-icon.png')\r\n    : path.join(__dirname, '../../public/icons/app-icon.png');\r\n\r\n  mainWindow = new BrowserWindow({\r\n    width: 400,\r\n    height: 600,\r\n    minWidth: 350,\r\n    minHeight: 500,\r\n    frame: false, // Remove frame to hide menu bar\r\n    resizable: true,\r\n    show: false, // Don't show until ready\r\n    backgroundColor: '#1e293b', // Set background color\r\n    icon: iconPath,\r\n    webPreferences: {\r\n      preload: app.isPackaged \r\n        ? path.join(__dirname, '..', 'preload', 'index.cjs')\r\n        : path.join(__dirname, '../preload/index.cjs'),\r\n      contextIsolation: true,\r\n      nodeIntegration: false,\r\n      sandbox: true, // Enable sandbox for security\r\n    },\r\n  });\r\n\r\n  // Load URL based on environment\r\n  const ELECTRON_RENDERER_URL = process.env.ELECTRON_RENDERER_URL;\r\n  console.log('[MAIN] ELECTRON_RENDERER_URL:', ELECTRON_RENDERER_URL);\r\n  console.log('[MAIN] Loading URL...');\r\n  console.log('[MAIN] __dirname:', __dirname);\r\n  console.log('[MAIN] app.isPackaged:', app.isPackaged);\r\n\r\n  if (ELECTRON_RENDERER_URL) {\r\n    mainWindow.loadURL(ELECTRON_RENDERER_URL);\r\n    console.log('[MAIN] Loaded from dev server:', ELECTRON_RENDERER_URL);\r\n  } else if (app.isPackaged) {\r\n    // In packaged app, renderer files are in dist/renderer\r\n    const indexPath = path.join(__dirname, '..', 'renderer', 'index.html');\r\n    console.log('[MAIN] Loading from:', indexPath);\r\n    mainWindow.loadFile(indexPath);\r\n    console.log('[MAIN] Loaded from file (packaged)');\r\n  } else {\r\n    // Development: load from default Vite port\r\n    mainWindow.loadURL('http://localhost:5173');\r\n    console.log('[MAIN] Loaded from local dev server');\r\n  }\r\n\r\n  console.log('[MAIN] Window created');\r\n\r\n  // Open DevTools for debugging\r\n  if (app.isPackaged) {\r\n    mainWindow.webContents.openDevTools({ mode: 'detach' });\r\n  }\r\n\r\n  // Window event listeners\r\n  mainWindow.on('close', (event) => {\r\n    console.log('[MAIN] Window close event, isQuitting:', isQuitting, 'minimizeToTray:', settings.minimizeToTray);\r\n    \r\n    // Minimize to tray instead of closing if enabled\r\n    if (!isQuitting && settings.minimizeToTray) {\r\n      event.preventDefault();\r\n      mainWindow?.hide();\r\n      console.log('[MAIN] Window hidden (minimized to tray)');\r\n    }\r\n  });\r\n\r\n  mainWindow.on('closed', () => {\r\n    console.log('[MAIN] Window closed event');\r\n    mainWindow = null;\r\n  });\r\n\r\n  // Listen for crashes or errors\r\n  mainWindow.webContents.on('did-fail-load', (_event, errorCode, errorDescription) => {\r\n    console.error('[MAIN] Failed to load:', errorCode, errorDescription);\r\n  });\r\n\r\n  mainWindow.webContents.on('crashed', () => {\r\n    console.error('[MAIN] Renderer process crashed');\r\n  });\r\n\r\n  mainWindow.webContents.on('render-process-gone', (_event, details) => {\r\n    console.error('[MAIN] Renderer process gone:', details);\r\n    console.error('[MAIN] Reason:', details.reason);\r\n    console.error('[MAIN] Exit code:', details.exitCode);\r\n  });\r\n\r\n  mainWindow.webContents.on('did-finish-load', () => {\r\n    console.log('[MAIN] Page finished loading');\r\n    mainWindow?.show();\r\n    mainWindow?.focus();\r\n    console.log('[MAIN] Window shown and focused');\r\n  });\r\n\r\n  mainWindow.webContents.on('dom-ready', () => {\r\n    console.log('[MAIN] DOM ready');\r\n  });\r\n\r\n  mainWindow.on('unresponsive', () => {\r\n    console.error('[MAIN] Window became unresponsive');\r\n  });\r\n\r\n  mainWindow.on('responsive', () => {\r\n    console.log('[MAIN] Window became responsive again');\r\n  });\r\n\r\n  return mainWindow;\r\n}\r\n\r\n// App event handlers\r\napp.whenReady().then(() => {\r\n  console.log('[MAIN] App is ready');\r\n  \r\n  createWindow();\r\n  console.log('[MAIN] IPC handlers setup');\r\n  if (mainWindow) {\r\n    setupIpcHandlers(mainWindow);\r\n  }\r\n\r\n  // Tray integration\r\n  if (mainWindow) {\r\n    createTray(mainWindow);\r\n    console.log('[MAIN] Tray created');\r\n  }\r\n\r\n  app.on('activate', () => {\r\n    if (BrowserWindow.getAllWindows().length === 0) {\r\n      createWindow();\r\n    } else if (mainWindow) {\r\n      mainWindow.show();\r\n    }\r\n  });\r\n});\r\n\r\napp.on('window-all-closed', () => {\r\n  console.log('[MAIN] window-all-closed event, platform:', process.platform);\r\n  \r\n  // Commented out for debugging - allows app to quit on window close\r\n  // if (process.platform !== 'darwin') {\r\n  //   app.quit();\r\n  // }\r\n});\r\n\r\napp.on('before-quit', () => {\r\n  console.log('[MAIN] before-quit event');\r\n  isQuitting = true;\r\n  cleanupIpcHandlers();\r\n  destroyTray();\r\n});\r\n\r\n// Quit when all windows are closed (except on macOS)\r\napp.on('will-quit', () => {\r\n  console.log('[MAIN] App will quit');\r\n  ipcMain.removeAllListeners();\r\n});\r\n", "import { ipcMain, BrowserWindow } from 'electron';\r\nimport { IPC_CHANNELS } from '@shared/constants';\r\nimport type { AppState, Settings, Session, Statistics } from '@shared/types';\r\nimport { getSettings, updateSettings, resetSettings, getSessions } from './store';\r\nimport { \r\n  startTimer, \r\n  pauseTimer, \r\n  resumeTimer, \r\n  resetTimer,\r\n  setTimerTickCallback,\r\n  setTimerCompleteCallback,\r\n} from './timer';\r\nimport { calculateStatistics } from './statistics';\r\n\r\nlet mainWindow: BrowserWindow | null = null;\r\n\r\nexport function setupIpcHandlers(window: BrowserWindow): void {\r\n  mainWindow = window;\r\n\r\n  // Setup timer callbacks to send events to renderer\r\n  setTimerTickCallback((state: AppState) => {\r\n    if (mainWindow && !mainWindow.isDestroyed()) {\r\n      mainWindow.webContents.send(IPC_CHANNELS.TIMER_TICK, state);\r\n    }\r\n  });\r\n\r\n  setTimerCompleteCallback(() => {\r\n    if (mainWindow && !mainWindow.isDestroyed()) {\r\n      mainWindow.webContents.send(IPC_CHANNELS.TIMER_COMPLETE);\r\n    }\r\n  });\r\n\r\n  // Settings handlers\r\n  ipcMain.handle(IPC_CHANNELS.SETTINGS_GET, (): Settings => {\r\n    return getSettings();\r\n  });\r\n\r\n  ipcMain.handle(IPC_CHANNELS.SETTINGS_UPDATE, (_event, partial: Partial<Settings>): Settings => {\r\n    const updated = updateSettings(partial);\r\n    \r\n    // Notify renderer of settings change\r\n    if (mainWindow && !mainWindow.isDestroyed()) {\r\n      mainWindow.webContents.send(IPC_CHANNELS.SETTINGS_CHANGED, updated);\r\n    }\r\n    \r\n    return updated;\r\n  });\r\n\r\n  ipcMain.handle(IPC_CHANNELS.SETTINGS_RESET, (): Settings => {\r\n    const defaults = resetSettings();\r\n    \r\n    // Notify renderer of settings change\r\n    if (mainWindow && !mainWindow.isDestroyed()) {\r\n      mainWindow.webContents.send(IPC_CHANNELS.SETTINGS_CHANGED, defaults);\r\n    }\r\n    \r\n    return defaults;\r\n  });\r\n\r\n  // Timer handlers\r\n  ipcMain.handle(IPC_CHANNELS.TIMER_START, (_event, type: 'focus' | 'break-short' | 'break-long'): AppState => {\r\n    const settings = getSettings();\r\n    const duration = type === 'focus' ? settings.focusDuration :\r\n                     type === 'break-short' ? settings.shortBreakDuration :\r\n                     settings.longBreakDuration;\r\n    \r\n    return startTimer(type, duration);\r\n  });\r\n\r\n  ipcMain.handle(IPC_CHANNELS.TIMER_PAUSE, (): AppState => {\r\n    return pauseTimer();\r\n  });\r\n\r\n  ipcMain.handle(IPC_CHANNELS.TIMER_RESUME, (): AppState => {\r\n    return resumeTimer();\r\n  });\r\n\r\n  ipcMain.handle(IPC_CHANNELS.TIMER_RESET, (): AppState => {\r\n    return resetTimer();\r\n  });\r\n\r\n  // Sessions handler\r\n  ipcMain.handle(IPC_CHANNELS.SESSIONS_GET, (): Session[] => {\r\n    return getSessions();\r\n  });\r\n\r\n  // Statistics handler\r\n  ipcMain.handle(IPC_CHANNELS.STATISTICS_GET, (): Statistics => {\r\n    return calculateStatistics();\r\n  });\r\n\r\n  // Window control handlers\r\n  ipcMain.on('window:minimize', () => {\r\n    if (mainWindow && !mainWindow.isDestroyed()) {\r\n      mainWindow.minimize();\r\n    }\r\n  });\r\n\r\n  ipcMain.on('window:close', () => {\r\n    if (mainWindow && !mainWindow.isDestroyed()) {\r\n      mainWindow.close();\r\n    }\r\n  });\r\n}\r\n\r\nexport function cleanupIpcHandlers(): void {\r\n  // Remove all handlers\r\n  ipcMain.removeHandler(IPC_CHANNELS.SETTINGS_GET);\r\n  ipcMain.removeHandler(IPC_CHANNELS.SETTINGS_UPDATE);\r\n  ipcMain.removeHandler(IPC_CHANNELS.SETTINGS_RESET);\r\n  ipcMain.removeHandler(IPC_CHANNELS.TIMER_START);\r\n  ipcMain.removeHandler(IPC_CHANNELS.TIMER_PAUSE);\r\n  ipcMain.removeHandler(IPC_CHANNELS.TIMER_RESUME);\r\n  ipcMain.removeHandler(IPC_CHANNELS.TIMER_RESET);\r\n  ipcMain.removeHandler(IPC_CHANNELS.SESSIONS_GET);\r\n  ipcMain.removeHandler(IPC_CHANNELS.STATISTICS_GET);\r\n  \r\n  mainWindow = null;\r\n}\r\n", "import type { Settings } from './types';\r\n\r\n// Default settings values\r\nexport const DEFAULT_SETTINGS: Settings = {\r\n  focusDuration: 25,\r\n  shortBreakDuration: 5,\r\n  longBreakDuration: 15,\r\n  sessionsBeforeLongBreak: 4,\r\n  theme: 'system',\r\n  notificationsEnabled: true,\r\n  soundEnabled: true,\r\n  minimizeToTray: true,\r\n  autoStartBreaks: true,\r\n  autoStartFocus: false,\r\n};\r\n\r\n// Timer states\r\nexport const TIMER_STATES = {\r\n  IDLE: 'idle' as const,\r\n  FOCUS: 'focus' as const,\r\n  BREAK_SHORT: 'break-short' as const,\r\n  BREAK_LONG: 'break-long' as const,\r\n};\r\n\r\n// IPC Channel names\r\nexport const IPC_CHANNELS = {\r\n  // Settings\r\n  SETTINGS_GET: 'settings:get',\r\n  SETTINGS_UPDATE: 'settings:update',\r\n  SETTINGS_RESET: 'settings:reset',\r\n  SETTINGS_CHANGED: 'settings:changed',\r\n\r\n  // Timer\r\n  TIMER_START: 'timer:start',\r\n  TIMER_PAUSE: 'timer:pause',\r\n  TIMER_RESUME: 'timer:resume',\r\n  TIMER_RESET: 'timer:reset',\r\n  TIMER_TICK: 'timer:tick',\r\n  TIMER_COMPLETE: 'timer:complete',\r\n\r\n  // Sessions\r\n  SESSIONS_GET: 'sessions:get',\r\n  \r\n  // Statistics\r\n  STATISTICS_GET: 'statistics:get',\r\n} as const;\r\n\r\n// Validation constants\r\nexport const VALIDATION = {\r\n  FOCUS_DURATION_MIN: 1,\r\n  FOCUS_DURATION_MAX: 60,\r\n  SHORT_BREAK_MIN: 1,\r\n  SHORT_BREAK_MAX: 30,\r\n  LONG_BREAK_MIN: 5,\r\n  LONG_BREAK_MAX: 60,\r\n  SESSIONS_BEFORE_LONG_BREAK_MIN: 2,\r\n  SESSIONS_BEFORE_LONG_BREAK_MAX: 10,\r\n} as const;\r\n\r\n// Performance targets\r\nexport const PERFORMANCE = {\r\n  STARTUP_TARGET_MS: 200,\r\n  MEMORY_TARGET_MB: 100,\r\n  TIMER_PRECISION_TOLERANCE_MS: 2000, // \u00B12s in 25min\r\n} as const;\r\n", "import Store from 'electron-store';\r\nimport type { Settings, Session } from '@shared/types';\r\nimport { DEFAULT_SETTINGS, VALIDATION } from '@shared/constants';\r\n\r\n// Schema for electron-store validation\r\nconst schema = {\r\n  settings: {\r\n    type: 'object',\r\n    properties: {\r\n      focusDuration: { type: 'number', minimum: VALIDATION.FOCUS_DURATION_MIN, maximum: VALIDATION.FOCUS_DURATION_MAX },\r\n      shortBreakDuration: { type: 'number', minimum: VALIDATION.SHORT_BREAK_MIN, maximum: VALIDATION.SHORT_BREAK_MAX },\r\n      longBreakDuration: { type: 'number', minimum: VALIDATION.LONG_BREAK_MIN, maximum: VALIDATION.LONG_BREAK_MAX },\r\n      sessionsBeforeLongBreak: { type: 'number', minimum: VALIDATION.SESSIONS_BEFORE_LONG_BREAK_MIN, maximum: VALIDATION.SESSIONS_BEFORE_LONG_BREAK_MAX },\r\n      theme: { type: 'string', enum: ['light', 'dark', 'system'] },\r\n      notificationsEnabled: { type: 'boolean' },\r\n      soundEnabled: { type: 'boolean' },\r\n      minimizeToTray: { type: 'boolean' },\r\n      autoStartBreaks: { type: 'boolean' },\r\n      autoStartFocus: { type: 'boolean' },\r\n    },\r\n    required: [\r\n      'focusDuration',\r\n      'shortBreakDuration',\r\n      'longBreakDuration',\r\n      'sessionsBeforeLongBreak',\r\n      'theme',\r\n      'notificationsEnabled',\r\n      'soundEnabled',\r\n      'minimizeToTray',\r\n      'autoStartBreaks',\r\n      'autoStartFocus',\r\n    ],\r\n  },\r\n  sessions: {\r\n    type: 'array',\r\n    items: {\r\n      type: 'object',\r\n      properties: {\r\n        id: { type: 'string' },\r\n        type: { type: 'string', enum: ['focus', 'break-short', 'break-long'] },\r\n        plannedDuration: { type: 'number', minimum: 1 },\r\n        actualDuration: { type: 'number', minimum: 0 },\r\n        startTime: { type: 'string' },\r\n        endTime: { type: 'string' },\r\n        completed: { type: 'boolean' },\r\n        interrupted: { type: 'boolean' },\r\n      },\r\n      required: ['id', 'type', 'plannedDuration', 'actualDuration', 'startTime', 'endTime', 'completed', 'interrupted'],\r\n    },\r\n  },\r\n} as const;\r\n\r\ninterface StoreSchema {\r\n  settings: Settings;\r\n  sessions: Session[];\r\n}\r\n\r\n// Initialize electron-store with schema and defaults\r\nconst store = new Store<StoreSchema>({\r\n  schema: schema as any, // electron-store schema typing is complex\r\n  defaults: {\r\n    settings: DEFAULT_SETTINGS,\r\n    sessions: [],\r\n  },\r\n  name: 'pomodoro-focus',\r\n});\r\n\r\n// Settings operations\r\nexport function getSettings(): Settings {\r\n  return store.get('settings', DEFAULT_SETTINGS);\r\n}\r\n\r\nexport function updateSettings(partial: Partial<Settings>): Settings {\r\n  const current = getSettings();\r\n  const updated = { ...current, ...partial };\r\n  store.set('settings', updated);\r\n  return updated;\r\n}\r\n\r\nexport function resetSettings(): Settings {\r\n  store.set('settings', DEFAULT_SETTINGS);\r\n  return DEFAULT_SETTINGS;\r\n}\r\n\r\n// Session operations\r\nexport function getSessions(): Session[] {\r\n  return store.get('sessions', []);\r\n}\r\n\r\nexport function addSession(session: Session): void {\r\n  const sessions = getSessions();\r\n  sessions.push(session);\r\n  store.set('sessions', sessions);\r\n}\r\n\r\nexport function clearSessions(): void {\r\n  store.set('sessions', []);\r\n}\r\n\r\n// Export store instance for advanced usage if needed\r\nexport default store;\r\n", "import type { AppState, Session } from '@shared/types';\r\nimport { TIMER_STATES } from '@shared/constants';\r\nimport { addSession } from './store';\r\n\r\nlet timerInterval: NodeJS.Timeout | null = null;\r\nlet appState: AppState = {\r\n  currentState: TIMER_STATES.IDLE,\r\n  timeLeft: 0,\r\n  sessionsCompleted: 0,\r\n  isPaused: false,\r\n  startTimestamp: null,\r\n};\r\nlet currentSessionId: string | null = null;\r\n\r\ntype TimerTickCallback = (state: AppState) => void;\r\ntype TimerCompleteCallback = () => void;\r\n\r\nlet onTick: TimerTickCallback | null = null;\r\nlet onComplete: TimerCompleteCallback | null = null;\r\n\r\n// Session tracking\r\nlet sessionStartedAt: Date | null = null;\r\nlet sessionInterruptions = 0;\r\nlet plannedDurationMinutes = 0;\r\n\r\nexport function setTimerTickCallback(callback: TimerTickCallback): void {\r\n  onTick = callback;\r\n}\r\n\r\nexport function setTimerCompleteCallback(callback: TimerCompleteCallback): void {\r\n  onComplete = callback;\r\n}\r\n\r\nexport function getAppState(): AppState {\r\n  return { ...appState };\r\n}\r\n\r\nexport function startTimer(type: 'focus' | 'break-short' | 'break-long', durationMinutes: number): AppState {\r\n  stopTimer(); // Clear any existing timer\r\n\r\n  const state = type === 'focus' ? TIMER_STATES.FOCUS : \r\n                type === 'break-short' ? TIMER_STATES.BREAK_SHORT : \r\n                TIMER_STATES.BREAK_LONG;\r\n\r\n  const now = Date.now();\r\n  appState = {\r\n    currentState: state,\r\n    timeLeft: durationMinutes * 60 * 1000, // Convert to milliseconds\r\n    sessionsCompleted: appState.sessionsCompleted,\r\n    isPaused: false,\r\n    startTimestamp: now,\r\n  };\r\n\r\n  currentSessionId = generateSessionId();\r\n  sessionStartedAt = new Date(now);\r\n  sessionInterruptions = 0;\r\n  plannedDurationMinutes = durationMinutes;\r\n\r\n  timerInterval = setInterval(() => {\r\n    if (!appState.isPaused) {\r\n      appState.timeLeft = Math.max(0, appState.timeLeft - 1000);\r\n\r\n      if (onTick) {\r\n        onTick({ ...appState });\r\n      }\r\n\r\n      if (appState.timeLeft <= 0) {\r\n        completeTimer(true);\r\n      }\r\n    }\r\n  }, 1000);\r\n\r\n  if (onTick) {\r\n    onTick({ ...appState });\r\n  }\r\n\r\n  return { ...appState };\r\n}\r\n\r\nexport function pauseTimer(): AppState {\r\n  if (appState.currentState === TIMER_STATES.IDLE) {\r\n    return { ...appState };\r\n  }\r\n\r\n  appState.isPaused = true;\r\n  sessionInterruptions++;\r\n\r\n  if (onTick) {\r\n    onTick({ ...appState });\r\n  }\r\n\r\n  return { ...appState };\r\n}\r\n\r\nexport function resumeTimer(): AppState {\r\n  if (appState.currentState === TIMER_STATES.IDLE || !appState.isPaused) {\r\n    return { ...appState };\r\n  }\r\n\r\n  appState.isPaused = false;\r\n\r\n  if (onTick) {\r\n    onTick({ ...appState });\r\n  }\r\n\r\n  return { ...appState };\r\n}\r\n\r\nexport function resetTimer(): AppState {\r\n  stopTimer();\r\n\r\n  // Save incomplete session if there was one\r\n  if (currentSessionId && sessionStartedAt) {\r\n    const endTime = new Date();\r\n    const actualDuration = Math.round((endTime.getTime() - sessionStartedAt.getTime()) / 1000 / 60);\r\n\r\n    const session: Session = {\r\n      id: currentSessionId,\r\n      type: appState.currentState === TIMER_STATES.FOCUS ? 'focus' :\r\n            appState.currentState === TIMER_STATES.BREAK_SHORT ? 'break-short' :\r\n            'break-long',\r\n      plannedDuration: plannedDurationMinutes,\r\n      actualDuration,\r\n      startTime: sessionStartedAt.toISOString(),\r\n      endTime: endTime.toISOString(),\r\n      completed: false,\r\n      interrupted: true,\r\n    };\r\n    addSession(session);\r\n  }\r\n\r\n  appState = {\r\n    currentState: TIMER_STATES.IDLE,\r\n    timeLeft: 0,\r\n    sessionsCompleted: appState.sessionsCompleted,\r\n    isPaused: false,\r\n    startTimestamp: null,\r\n  };\r\n\r\n  currentSessionId = null;\r\n  sessionStartedAt = null;\r\n  sessionInterruptions = 0;\r\n  plannedDurationMinutes = 0;\r\n\r\n  if (onTick) {\r\n    onTick({ ...appState });\r\n  }\r\n\r\n  return { ...appState };\r\n}\r\n\r\nfunction stopTimer(): void {\r\n  if (timerInterval) {\r\n    clearInterval(timerInterval);\r\n    timerInterval = null;\r\n  }\r\n}\r\n\r\nfunction completeTimer(wasCompleted: boolean): void {\r\n  stopTimer();\r\n\r\n  if (currentSessionId && sessionStartedAt) {\r\n    const endTime = new Date();\r\n    const actualDuration = Math.round((endTime.getTime() - sessionStartedAt.getTime()) / 1000 / 60);\r\n\r\n    const session: Session = {\r\n      id: currentSessionId,\r\n      type: appState.currentState === TIMER_STATES.FOCUS ? 'focus' :\r\n            appState.currentState === TIMER_STATES.BREAK_SHORT ? 'break-short' :\r\n            'break-long',\r\n      plannedDuration: plannedDurationMinutes,\r\n      actualDuration,\r\n      startTime: sessionStartedAt.toISOString(),\r\n      endTime: endTime.toISOString(),\r\n      completed: wasCompleted,\r\n      interrupted: !wasCompleted,\r\n    };\r\n    addSession(session);\r\n\r\n    // Increment completed sessions counter only for completed focus sessions\r\n    if (wasCompleted && appState.currentState === TIMER_STATES.FOCUS) {\r\n      appState.sessionsCompleted = (appState.sessionsCompleted + 1) % 4; // Reset to 0 after 4\r\n    }\r\n  }\r\n\r\n  appState = {\r\n    currentState: TIMER_STATES.IDLE,\r\n    timeLeft: 0,\r\n    sessionsCompleted: appState.sessionsCompleted,\r\n    isPaused: false,\r\n    startTimestamp: null,\r\n  };\r\n\r\n  currentSessionId = null;\r\n  sessionStartedAt = null;\r\n  sessionInterruptions = 0;\r\n  plannedDurationMinutes = 0;\r\n\r\n  if (onComplete) {\r\n    onComplete();\r\n  }\r\n\r\n  if (onTick) {\r\n    onTick({ ...appState });\r\n  }\r\n}\r\n\r\nfunction generateSessionId(): string {\r\n  return `session-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\r\n}\r\n\r\n", "import type { Session, Statistics } from '@shared/types';\r\nimport { getSessions } from './store';\r\n\r\nexport function calculateStatistics(): Statistics {\r\n  const sessions = getSessions();\r\n  const now = new Date();\r\n  \r\n  // Today's data (midnight to now)\r\n  const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n  const todaySessions = sessions.filter(s => {\r\n    const sessionDate = new Date(s.startTime);\r\n    return sessionDate >= todayStart && s.type === 'focus' && s.completed;\r\n  });\r\n  \r\n  const todayFocusMinutes = todaySessions.reduce((sum, s) => sum + s.actualDuration, 0);\r\n  const todaySessionsCompleted = todaySessions.length;\r\n  \r\n  // This week's data (Monday to now)\r\n  const weekStart = getMonday(now);\r\n  const weekSessions = sessions.filter(s => {\r\n    const sessionDate = new Date(s.startTime);\r\n    return sessionDate >= weekStart && s.type === 'focus' && s.completed;\r\n  });\r\n  \r\n  const weekFocusMinutes = weekSessions.reduce((sum, s) => sum + s.actualDuration, 0);\r\n  const weekSessionsCompleted = weekSessions.length;\r\n  \r\n  // Streak calculation\r\n  const { currentStreak, longestStreak } = calculateStreaks(sessions);\r\n  \r\n  return {\r\n    todayFocusMinutes,\r\n    todaySessionsCompleted,\r\n    weekFocusMinutes,\r\n    weekSessionsCompleted,\r\n    currentStreak,\r\n    longestStreak,\r\n  };\r\n}\r\n\r\nfunction getMonday(date: Date): Date {\r\n  const d = new Date(date);\r\n  const day = d.getDay();\r\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust when Sunday\r\n  return new Date(d.setDate(diff));\r\n}\r\n\r\nfunction calculateStreaks(sessions: Session[]): { currentStreak: number; longestStreak: number } {\r\n  if (sessions.length === 0) {\r\n    return { currentStreak: 0, longestStreak: 0 };\r\n  }\r\n  \r\n  // Group sessions by day\r\n  const focusSessions = sessions.filter(s => s.type === 'focus' && s.completed);\r\n  const dayMap = new Map<string, boolean>();\r\n  \r\n  focusSessions.forEach(session => {\r\n    const date = new Date(session.startTime);\r\n    const dayKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\r\n    dayMap.set(dayKey, true);\r\n  });\r\n  \r\n  const sortedDays = Array.from(dayMap.keys()).sort();\r\n  \r\n  if (sortedDays.length === 0) {\r\n    return { currentStreak: 0, longestStreak: 0 };\r\n  }\r\n  \r\n  // Calculate current streak (from today backwards)\r\n  const today = new Date();\r\n  \r\n  let currentStreak = 0;\r\n  let checkDate = new Date(today);\r\n  \r\n  while (true) {\r\n    const checkKey = `${checkDate.getFullYear()}-${String(checkDate.getMonth() + 1).padStart(2, '0')}-${String(checkDate.getDate()).padStart(2, '0')}`;\r\n    \r\n    if (dayMap.has(checkKey)) {\r\n      currentStreak++;\r\n      checkDate.setDate(checkDate.getDate() - 1);\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  \r\n  // Calculate longest streak\r\n  let longestStreak = 0;\r\n  let tempStreak = 1;\r\n  \r\n  for (let i = 1; i < sortedDays.length; i++) {\r\n    const prevDate = new Date(sortedDays[i - 1]);\r\n    const currDate = new Date(sortedDays[i]);\r\n    \r\n    const diffDays = Math.floor((currDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24));\r\n    \r\n    if (diffDays === 1) {\r\n      tempStreak++;\r\n    } else {\r\n      longestStreak = Math.max(longestStreak, tempStreak);\r\n      tempStreak = 1;\r\n    }\r\n  }\r\n  \r\n  longestStreak = Math.max(longestStreak, tempStreak);\r\n  \r\n  return { currentStreak, longestStreak };\r\n}\r\n", "import { app, Tray, Menu, nativeImage, BrowserWindow } from 'electron';\r\nimport path from 'path';\r\nimport type { AppState } from '@shared/types';\r\n\r\nlet tray: Tray | null = null;\r\nlet mainWindow: BrowserWindow | null = null;\r\n\r\nexport function createTray(window: BrowserWindow): Tray {\r\n  mainWindow = window;\r\n\r\n  // Create tray icon using PNG file\r\n  const icon = createTrayIcon();\r\n  tray = new Tray(icon);\r\n\r\n  tray.setToolTip('Pomodoro Focus');\r\n  updateTrayMenu('idle');\r\n\r\n  // Show/hide window on tray click\r\n  tray.on('click', () => {\r\n    if (mainWindow) {\r\n      if (mainWindow.isVisible()) {\r\n        mainWindow.hide();\r\n      } else {\r\n        mainWindow.show();\r\n        mainWindow.focus();\r\n      }\r\n    }\r\n  });\r\n\r\n  return tray;\r\n}\r\n\r\nexport function updateTrayMenu(timerState: AppState['currentState']): void {\r\n  if (!tray || !mainWindow) return;\r\n\r\n  const contextMenu = Menu.buildFromTemplate([\r\n    {\r\n      label: `Status: ${formatState(timerState)}`,\r\n      enabled: false,\r\n    },\r\n    { type: 'separator' },\r\n    {\r\n      label: 'Mostrar',\r\n      click: () => {\r\n        mainWindow?.show();\r\n        mainWindow?.focus();\r\n      },\r\n    },\r\n    {\r\n      label: 'Ocultar',\r\n      click: () => {\r\n        mainWindow?.hide();\r\n      },\r\n    },\r\n    { type: 'separator' },\r\n    {\r\n      label: 'Sair',\r\n      click: () => {\r\n        app.quit();\r\n      },\r\n    },\r\n  ]);\r\n\r\n  tray.setContextMenu(contextMenu);\r\n}\r\n\r\nexport function updateTrayTitle(timeLeft: number): void {\r\n  if (!tray) return;\r\n\r\n  const minutes = Math.floor(timeLeft / 1000 / 60);\r\n  const seconds = Math.floor((timeLeft / 1000) % 60);\r\n  const timeString = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\r\n\r\n  // On Windows/Linux, update tooltip; on macOS, update title\r\n  if (process.platform === 'darwin') {\r\n    tray.setTitle(timeString);\r\n  } else {\r\n    tray.setToolTip(`Pomodoro Focus - ${timeString}`);\r\n  }\r\n}\r\n\r\nexport function destroyTray(): void {\r\n  if (tray) {\r\n    tray.destroy();\r\n    tray = null;\r\n  }\r\n  mainWindow = null;\r\n}\r\n\r\nfunction createTrayIcon(): Electron.NativeImage {\r\n  // Use PNG icon for better Windows compatibility\r\n  // Tray icons should be 16x16 or 32x32 on Windows\r\n  const iconPath = app.isPackaged\r\n    ? path.join(process.resourcesPath, 'icons', 'app-icon.png')\r\n    : path.join(__dirname, '../../public/icons/app-icon.png');\r\n\r\n  const icon = nativeImage.createFromPath(iconPath);\r\n  \r\n  // Resize to tray size (Windows expects 16x16)\r\n  return icon.resize({ width: 16, height: 16 });\r\n}\r\n\r\nfunction formatState(state: AppState['currentState']): string {\r\n  switch (state) {\r\n    case 'idle':\r\n      return 'Ocioso';\r\n    case 'focus':\r\n      return 'Foco';\r\n    case 'break-short':\r\n      return 'Pausa Curta';\r\n    case 'break-long':\r\n      return 'Pausa Longa';\r\n    default:\r\n      return 'Desconhecido';\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_electron", "import_path", "Store", "import_electron", "mainWindow", "mainWindow", "path", "mainWindow", "path"]
}
