{
  "version": 3,
  "sources": ["../../src/main/index.ts", "../../src/main/ipc.ts", "../../src/shared/constants.ts", "../../src/main/store.ts", "../../src/main/timer.ts", "../../src/main/statistics.ts", "../../src/main/tray.ts"],
  "sourcesContent": ["import { app, BrowserWindow, ipcMain } from 'electron';\nimport path from 'path';\nimport { setupIpcHandlers, cleanupIpcHandlers } from './ipc';\nimport { createTray, destroyTray } from './tray';\nimport { getSettings } from './store';\n\nlet mainWindow: BrowserWindow | null = null;\nlet isQuitting = false;\n\n// Verbose logging only in development\nconst isDev = process.env.NODE_ENV !== 'production';\n\nif (isDev) {\n  app.commandLine.appendSwitch('enable-logging');\n  app.commandLine.appendSwitch('v', '1');\n}\n\n// Disable GPU to prevent renderer crashes on some Windows systems\napp.commandLine.appendSwitch('disable-gpu');\napp.commandLine.appendSwitch('disable-software-rasterizer');\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  console.error('[MAIN] Uncaught Exception:', error);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('[MAIN] Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\napp.on('will-quit', () => {\n  console.log('[MAIN] will-quit event');\n});\n\napp.on('quit', () => {\n  console.log('[MAIN] quit event');\n  ipcMain.removeAllListeners();\n});\n\nfunction createWindow(): BrowserWindow {\n  console.log('[MAIN] Creating window...');\n  const settings = getSettings();\n  console.log('[MAIN] Settings loaded:', settings);\n\n  // Create app icon\n  const iconPath = app.isPackaged\n    ? path.join(process.resourcesPath, 'icons', 'app-icon.png')\n    : path.join(__dirname, '../../public/icons/app-icon.png');\n\n  mainWindow = new BrowserWindow({\n    width: 400,\n    height: 600,\n    minWidth: 350,\n    minHeight: 500,\n    frame: false, // Remove frame to hide menu bar\n    resizable: true,\n    icon: iconPath,\n    webPreferences: {\n      preload: path.join(__dirname, '../preload/index.cjs'),\n      contextIsolation: true,\n      nodeIntegration: false,\n      sandbox: true, // Enable sandbox for security\n    },\n  });\n\n  // Load URL based on environment\n  const ELECTRON_RENDERER_URL = process.env.ELECTRON_RENDERER_URL;\n  console.log('[MAIN] ELECTRON_RENDERER_URL:', ELECTRON_RENDERER_URL);\n  console.log('[MAIN] Loading URL...');\n\n  if (ELECTRON_RENDERER_URL) {\n    mainWindow.loadURL(ELECTRON_RENDERER_URL);\n    console.log('[MAIN] Loaded from dev server:', ELECTRON_RENDERER_URL);\n  } else if (app.isPackaged) {\n    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'));\n    console.log('[MAIN] Loaded from file (packaged)');\n  } else {\n    // Development: load from default Vite port\n    mainWindow.loadURL('http://localhost:5173');\n    console.log('[MAIN] Loaded from local dev server');\n  }\n\n  console.log('[MAIN] Window created');\n\n  // Window event listeners\n  mainWindow.on('close', (event) => {\n    console.log('[MAIN] Window close event, isQuitting:', isQuitting, 'minimizeToTray:', settings.minimizeToTray);\n    \n    // Minimize to tray instead of closing if enabled\n    if (!isQuitting && settings.minimizeToTray) {\n      event.preventDefault();\n      mainWindow?.hide();\n      console.log('[MAIN] Window hidden (minimized to tray)');\n    }\n  });\n\n  mainWindow.on('closed', () => {\n    console.log('[MAIN] Window closed event');\n    mainWindow = null;\n  });\n\n  // Listen for crashes or errors\n  mainWindow.webContents.on('did-fail-load', (_event, errorCode, errorDescription) => {\n    console.error('[MAIN] Failed to load:', errorCode, errorDescription);\n  });\n\n  mainWindow.webContents.on('crashed', () => {\n    console.error('[MAIN] Renderer process crashed');\n  });\n\n  mainWindow.webContents.on('render-process-gone', (_event, details) => {\n    console.error('[MAIN] Renderer process gone:', details);\n    console.error('[MAIN] Reason:', details.reason);\n    console.error('[MAIN] Exit code:', details.exitCode);\n  });\n\n  mainWindow.webContents.on('did-finish-load', () => {\n    console.log('[MAIN] Page finished loading');\n  });\n\n  mainWindow.webContents.on('dom-ready', () => {\n    console.log('[MAIN] DOM ready');\n  });\n\n  mainWindow.on('unresponsive', () => {\n    console.error('[MAIN] Window became unresponsive');\n  });\n\n  mainWindow.on('responsive', () => {\n    console.log('[MAIN] Window became responsive again');\n  });\n\n  return mainWindow;\n}\n\n// App event handlers\napp.whenReady().then(() => {\n  console.log('[MAIN] App is ready');\n  \n  createWindow();\n  console.log('[MAIN] IPC handlers setup');\n  if (mainWindow) {\n    setupIpcHandlers(mainWindow);\n  }\n\n  // Tray integration\n  if (mainWindow) {\n    createTray(mainWindow);\n    console.log('[MAIN] Tray created');\n  }\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    } else if (mainWindow) {\n      mainWindow.show();\n    }\n  });\n});\n\napp.on('window-all-closed', () => {\n  console.log('[MAIN] window-all-closed event, platform:', process.platform);\n  \n  // Commented out for debugging - allows app to quit on window close\n  // if (process.platform !== 'darwin') {\n  //   app.quit();\n  // }\n});\n\napp.on('before-quit', () => {\n  console.log('[MAIN] before-quit event');\n  isQuitting = true;\n  cleanupIpcHandlers();\n  destroyTray();\n});\n\n// Quit when all windows are closed (except on macOS)\napp.on('will-quit', () => {\n  console.log('[MAIN] App will quit');\n  ipcMain.removeAllListeners();\n});\n", "import { ipcMain, BrowserWindow } from 'electron';\nimport { IPC_CHANNELS } from '@shared/constants';\nimport type { AppState, Settings, Session, Statistics } from '@shared/types';\nimport { getSettings, updateSettings, resetSettings, getSessions } from './store';\nimport { \n  startTimer, \n  pauseTimer, \n  resumeTimer, \n  resetTimer,\n  setTimerTickCallback,\n  setTimerCompleteCallback,\n} from './timer';\nimport { calculateStatistics } from './statistics';\n\nlet mainWindow: BrowserWindow | null = null;\n\nexport function setupIpcHandlers(window: BrowserWindow): void {\n  mainWindow = window;\n\n  // Setup timer callbacks to send events to renderer\n  setTimerTickCallback((state: AppState) => {\n    if (mainWindow && !mainWindow.isDestroyed()) {\n      mainWindow.webContents.send(IPC_CHANNELS.TIMER_TICK, state);\n    }\n  });\n\n  setTimerCompleteCallback(() => {\n    if (mainWindow && !mainWindow.isDestroyed()) {\n      mainWindow.webContents.send(IPC_CHANNELS.TIMER_COMPLETE);\n    }\n  });\n\n  // Settings handlers\n  ipcMain.handle(IPC_CHANNELS.SETTINGS_GET, (): Settings => {\n    return getSettings();\n  });\n\n  ipcMain.handle(IPC_CHANNELS.SETTINGS_UPDATE, (_event, partial: Partial<Settings>): Settings => {\n    const updated = updateSettings(partial);\n    \n    // Notify renderer of settings change\n    if (mainWindow && !mainWindow.isDestroyed()) {\n      mainWindow.webContents.send(IPC_CHANNELS.SETTINGS_CHANGED, updated);\n    }\n    \n    return updated;\n  });\n\n  ipcMain.handle(IPC_CHANNELS.SETTINGS_RESET, (): Settings => {\n    const defaults = resetSettings();\n    \n    // Notify renderer of settings change\n    if (mainWindow && !mainWindow.isDestroyed()) {\n      mainWindow.webContents.send(IPC_CHANNELS.SETTINGS_CHANGED, defaults);\n    }\n    \n    return defaults;\n  });\n\n  // Timer handlers\n  ipcMain.handle(IPC_CHANNELS.TIMER_START, (_event, type: 'focus' | 'break-short' | 'break-long'): AppState => {\n    const settings = getSettings();\n    const duration = type === 'focus' ? settings.focusDuration :\n                     type === 'break-short' ? settings.shortBreakDuration :\n                     settings.longBreakDuration;\n    \n    return startTimer(type, duration);\n  });\n\n  ipcMain.handle(IPC_CHANNELS.TIMER_PAUSE, (): AppState => {\n    return pauseTimer();\n  });\n\n  ipcMain.handle(IPC_CHANNELS.TIMER_RESUME, (): AppState => {\n    return resumeTimer();\n  });\n\n  ipcMain.handle(IPC_CHANNELS.TIMER_RESET, (): AppState => {\n    return resetTimer();\n  });\n\n  // Sessions handler\n  ipcMain.handle(IPC_CHANNELS.SESSIONS_GET, (): Session[] => {\n    return getSessions();\n  });\n\n  // Statistics handler\n  ipcMain.handle(IPC_CHANNELS.STATISTICS_GET, (): Statistics => {\n    return calculateStatistics();\n  });\n\n  // Window control handlers\n  ipcMain.on('window:minimize', () => {\n    if (mainWindow && !mainWindow.isDestroyed()) {\n      mainWindow.minimize();\n    }\n  });\n\n  ipcMain.on('window:close', () => {\n    if (mainWindow && !mainWindow.isDestroyed()) {\n      mainWindow.close();\n    }\n  });\n}\n\nexport function cleanupIpcHandlers(): void {\n  // Remove all handlers\n  ipcMain.removeHandler(IPC_CHANNELS.SETTINGS_GET);\n  ipcMain.removeHandler(IPC_CHANNELS.SETTINGS_UPDATE);\n  ipcMain.removeHandler(IPC_CHANNELS.SETTINGS_RESET);\n  ipcMain.removeHandler(IPC_CHANNELS.TIMER_START);\n  ipcMain.removeHandler(IPC_CHANNELS.TIMER_PAUSE);\n  ipcMain.removeHandler(IPC_CHANNELS.TIMER_RESUME);\n  ipcMain.removeHandler(IPC_CHANNELS.TIMER_RESET);\n  ipcMain.removeHandler(IPC_CHANNELS.SESSIONS_GET);\n  ipcMain.removeHandler(IPC_CHANNELS.STATISTICS_GET);\n  \n  mainWindow = null;\n}\n", "import type { Settings } from './types';\n\n// Default settings values\nexport const DEFAULT_SETTINGS: Settings = {\n  focusDuration: 25,\n  shortBreakDuration: 5,\n  longBreakDuration: 15,\n  sessionsBeforeLongBreak: 4,\n  theme: 'system',\n  notificationsEnabled: true,\n  soundEnabled: true,\n  minimizeToTray: true,\n  autoStartBreaks: true,\n  autoStartFocus: false,\n};\n\n// Timer states\nexport const TIMER_STATES = {\n  IDLE: 'idle' as const,\n  FOCUS: 'focus' as const,\n  BREAK_SHORT: 'break-short' as const,\n  BREAK_LONG: 'break-long' as const,\n};\n\n// IPC Channel names\nexport const IPC_CHANNELS = {\n  // Settings\n  SETTINGS_GET: 'settings:get',\n  SETTINGS_UPDATE: 'settings:update',\n  SETTINGS_RESET: 'settings:reset',\n  SETTINGS_CHANGED: 'settings:changed',\n\n  // Timer\n  TIMER_START: 'timer:start',\n  TIMER_PAUSE: 'timer:pause',\n  TIMER_RESUME: 'timer:resume',\n  TIMER_RESET: 'timer:reset',\n  TIMER_TICK: 'timer:tick',\n  TIMER_COMPLETE: 'timer:complete',\n\n  // Sessions\n  SESSIONS_GET: 'sessions:get',\n  \n  // Statistics\n  STATISTICS_GET: 'statistics:get',\n} as const;\n\n// Validation constants\nexport const VALIDATION = {\n  FOCUS_DURATION_MIN: 1,\n  FOCUS_DURATION_MAX: 60,\n  SHORT_BREAK_MIN: 1,\n  SHORT_BREAK_MAX: 30,\n  LONG_BREAK_MIN: 5,\n  LONG_BREAK_MAX: 60,\n  SESSIONS_BEFORE_LONG_BREAK_MIN: 2,\n  SESSIONS_BEFORE_LONG_BREAK_MAX: 10,\n} as const;\n\n// Performance targets\nexport const PERFORMANCE = {\n  STARTUP_TARGET_MS: 200,\n  MEMORY_TARGET_MB: 100,\n  TIMER_PRECISION_TOLERANCE_MS: 2000, // \u00B12s in 25min\n} as const;\n", "import Store from 'electron-store';\nimport type { Settings, Session } from '@shared/types';\nimport { DEFAULT_SETTINGS, VALIDATION } from '@shared/constants';\n\n// Schema for electron-store validation\nconst schema = {\n  settings: {\n    type: 'object',\n    properties: {\n      focusDuration: { type: 'number', minimum: VALIDATION.FOCUS_DURATION_MIN, maximum: VALIDATION.FOCUS_DURATION_MAX },\n      shortBreakDuration: { type: 'number', minimum: VALIDATION.SHORT_BREAK_MIN, maximum: VALIDATION.SHORT_BREAK_MAX },\n      longBreakDuration: { type: 'number', minimum: VALIDATION.LONG_BREAK_MIN, maximum: VALIDATION.LONG_BREAK_MAX },\n      sessionsBeforeLongBreak: { type: 'number', minimum: VALIDATION.SESSIONS_BEFORE_LONG_BREAK_MIN, maximum: VALIDATION.SESSIONS_BEFORE_LONG_BREAK_MAX },\n      theme: { type: 'string', enum: ['light', 'dark', 'system'] },\n      notificationsEnabled: { type: 'boolean' },\n      soundEnabled: { type: 'boolean' },\n      minimizeToTray: { type: 'boolean' },\n      autoStartBreaks: { type: 'boolean' },\n      autoStartFocus: { type: 'boolean' },\n    },\n    required: [\n      'focusDuration',\n      'shortBreakDuration',\n      'longBreakDuration',\n      'sessionsBeforeLongBreak',\n      'theme',\n      'notificationsEnabled',\n      'soundEnabled',\n      'minimizeToTray',\n      'autoStartBreaks',\n      'autoStartFocus',\n    ],\n  },\n  sessions: {\n    type: 'array',\n    items: {\n      type: 'object',\n      properties: {\n        id: { type: 'string' },\n        type: { type: 'string', enum: ['focus', 'break-short', 'break-long'] },\n        plannedDuration: { type: 'number', minimum: 1 },\n        actualDuration: { type: 'number', minimum: 0 },\n        startTime: { type: 'string' },\n        endTime: { type: 'string' },\n        completed: { type: 'boolean' },\n        interrupted: { type: 'boolean' },\n      },\n      required: ['id', 'type', 'plannedDuration', 'actualDuration', 'startTime', 'endTime', 'completed', 'interrupted'],\n    },\n  },\n} as const;\n\ninterface StoreSchema {\n  settings: Settings;\n  sessions: Session[];\n}\n\n// Initialize electron-store with schema and defaults\nconst store = new Store<StoreSchema>({\n  schema: schema as any, // electron-store schema typing is complex\n  defaults: {\n    settings: DEFAULT_SETTINGS,\n    sessions: [],\n  },\n  name: 'pomodoro-focus',\n});\n\n// Settings operations\nexport function getSettings(): Settings {\n  return store.get('settings', DEFAULT_SETTINGS);\n}\n\nexport function updateSettings(partial: Partial<Settings>): Settings {\n  const current = getSettings();\n  const updated = { ...current, ...partial };\n  store.set('settings', updated);\n  return updated;\n}\n\nexport function resetSettings(): Settings {\n  store.set('settings', DEFAULT_SETTINGS);\n  return DEFAULT_SETTINGS;\n}\n\n// Session operations\nexport function getSessions(): Session[] {\n  return store.get('sessions', []);\n}\n\nexport function addSession(session: Session): void {\n  const sessions = getSessions();\n  sessions.push(session);\n  store.set('sessions', sessions);\n}\n\nexport function clearSessions(): void {\n  store.set('sessions', []);\n}\n\n// Export store instance for advanced usage if needed\nexport default store;\n", "import type { AppState, Session } from '@shared/types';\nimport { TIMER_STATES } from '@shared/constants';\nimport { addSession } from './store';\n\nlet timerInterval: NodeJS.Timeout | null = null;\nlet appState: AppState = {\n  currentState: TIMER_STATES.IDLE,\n  timeLeft: 0,\n  sessionsCompleted: 0,\n  isPaused: false,\n  startTimestamp: null,\n};\nlet currentSessionId: string | null = null;\n\ntype TimerTickCallback = (state: AppState) => void;\ntype TimerCompleteCallback = () => void;\n\nlet onTick: TimerTickCallback | null = null;\nlet onComplete: TimerCompleteCallback | null = null;\n\n// Session tracking\nlet sessionStartedAt: Date | null = null;\nlet sessionInterruptions = 0;\nlet plannedDurationMinutes = 0;\n\nexport function setTimerTickCallback(callback: TimerTickCallback): void {\n  onTick = callback;\n}\n\nexport function setTimerCompleteCallback(callback: TimerCompleteCallback): void {\n  onComplete = callback;\n}\n\nexport function getAppState(): AppState {\n  return { ...appState };\n}\n\nexport function startTimer(type: 'focus' | 'break-short' | 'break-long', durationMinutes: number): AppState {\n  stopTimer(); // Clear any existing timer\n\n  const state = type === 'focus' ? TIMER_STATES.FOCUS : \n                type === 'break-short' ? TIMER_STATES.BREAK_SHORT : \n                TIMER_STATES.BREAK_LONG;\n\n  const now = Date.now();\n  appState = {\n    currentState: state,\n    timeLeft: durationMinutes * 60 * 1000, // Convert to milliseconds\n    sessionsCompleted: appState.sessionsCompleted,\n    isPaused: false,\n    startTimestamp: now,\n  };\n\n  currentSessionId = generateSessionId();\n  sessionStartedAt = new Date(now);\n  sessionInterruptions = 0;\n  plannedDurationMinutes = durationMinutes;\n\n  timerInterval = setInterval(() => {\n    if (!appState.isPaused) {\n      appState.timeLeft = Math.max(0, appState.timeLeft - 1000);\n\n      if (onTick) {\n        onTick({ ...appState });\n      }\n\n      if (appState.timeLeft <= 0) {\n        completeTimer(true);\n      }\n    }\n  }, 1000);\n\n  if (onTick) {\n    onTick({ ...appState });\n  }\n\n  return { ...appState };\n}\n\nexport function pauseTimer(): AppState {\n  if (appState.currentState === TIMER_STATES.IDLE) {\n    return { ...appState };\n  }\n\n  appState.isPaused = true;\n  sessionInterruptions++;\n\n  if (onTick) {\n    onTick({ ...appState });\n  }\n\n  return { ...appState };\n}\n\nexport function resumeTimer(): AppState {\n  if (appState.currentState === TIMER_STATES.IDLE || !appState.isPaused) {\n    return { ...appState };\n  }\n\n  appState.isPaused = false;\n\n  if (onTick) {\n    onTick({ ...appState });\n  }\n\n  return { ...appState };\n}\n\nexport function resetTimer(): AppState {\n  stopTimer();\n\n  // Save incomplete session if there was one\n  if (currentSessionId && sessionStartedAt) {\n    const endTime = new Date();\n    const actualDuration = Math.round((endTime.getTime() - sessionStartedAt.getTime()) / 1000 / 60);\n\n    const session: Session = {\n      id: currentSessionId,\n      type: appState.currentState === TIMER_STATES.FOCUS ? 'focus' :\n            appState.currentState === TIMER_STATES.BREAK_SHORT ? 'break-short' :\n            'break-long',\n      plannedDuration: plannedDurationMinutes,\n      actualDuration,\n      startTime: sessionStartedAt.toISOString(),\n      endTime: endTime.toISOString(),\n      completed: false,\n      interrupted: true,\n    };\n    addSession(session);\n  }\n\n  appState = {\n    currentState: TIMER_STATES.IDLE,\n    timeLeft: 0,\n    sessionsCompleted: appState.sessionsCompleted,\n    isPaused: false,\n    startTimestamp: null,\n  };\n\n  currentSessionId = null;\n  sessionStartedAt = null;\n  sessionInterruptions = 0;\n  plannedDurationMinutes = 0;\n\n  if (onTick) {\n    onTick({ ...appState });\n  }\n\n  return { ...appState };\n}\n\nfunction stopTimer(): void {\n  if (timerInterval) {\n    clearInterval(timerInterval);\n    timerInterval = null;\n  }\n}\n\nfunction completeTimer(wasCompleted: boolean): void {\n  stopTimer();\n\n  if (currentSessionId && sessionStartedAt) {\n    const endTime = new Date();\n    const actualDuration = Math.round((endTime.getTime() - sessionStartedAt.getTime()) / 1000 / 60);\n\n    const session: Session = {\n      id: currentSessionId,\n      type: appState.currentState === TIMER_STATES.FOCUS ? 'focus' :\n            appState.currentState === TIMER_STATES.BREAK_SHORT ? 'break-short' :\n            'break-long',\n      plannedDuration: plannedDurationMinutes,\n      actualDuration,\n      startTime: sessionStartedAt.toISOString(),\n      endTime: endTime.toISOString(),\n      completed: wasCompleted,\n      interrupted: !wasCompleted,\n    };\n    addSession(session);\n\n    // Increment completed sessions counter only for completed focus sessions\n    if (wasCompleted && appState.currentState === TIMER_STATES.FOCUS) {\n      appState.sessionsCompleted = (appState.sessionsCompleted + 1) % 4; // Reset to 0 after 4\n    }\n  }\n\n  appState = {\n    currentState: TIMER_STATES.IDLE,\n    timeLeft: 0,\n    sessionsCompleted: appState.sessionsCompleted,\n    isPaused: false,\n    startTimestamp: null,\n  };\n\n  currentSessionId = null;\n  sessionStartedAt = null;\n  sessionInterruptions = 0;\n  plannedDurationMinutes = 0;\n\n  if (onComplete) {\n    onComplete();\n  }\n\n  if (onTick) {\n    onTick({ ...appState });\n  }\n}\n\nfunction generateSessionId(): string {\n  return `session-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n}\n\n", "import type { Session, Statistics } from '@shared/types';\nimport { getSessions } from './store';\n\nexport function calculateStatistics(): Statistics {\n  const sessions = getSessions();\n  const now = new Date();\n  \n  // Today's data (midnight to now)\n  const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const todaySessions = sessions.filter(s => {\n    const sessionDate = new Date(s.startTime);\n    return sessionDate >= todayStart && s.type === 'focus' && s.completed;\n  });\n  \n  const todayFocusMinutes = todaySessions.reduce((sum, s) => sum + s.actualDuration, 0);\n  const todaySessionsCompleted = todaySessions.length;\n  \n  // This week's data (Monday to now)\n  const weekStart = getMonday(now);\n  const weekSessions = sessions.filter(s => {\n    const sessionDate = new Date(s.startTime);\n    return sessionDate >= weekStart && s.type === 'focus' && s.completed;\n  });\n  \n  const weekFocusMinutes = weekSessions.reduce((sum, s) => sum + s.actualDuration, 0);\n  const weekSessionsCompleted = weekSessions.length;\n  \n  // Streak calculation\n  const { currentStreak, longestStreak } = calculateStreaks(sessions);\n  \n  return {\n    todayFocusMinutes,\n    todaySessionsCompleted,\n    weekFocusMinutes,\n    weekSessionsCompleted,\n    currentStreak,\n    longestStreak,\n  };\n}\n\nfunction getMonday(date: Date): Date {\n  const d = new Date(date);\n  const day = d.getDay();\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust when Sunday\n  return new Date(d.setDate(diff));\n}\n\nfunction calculateStreaks(sessions: Session[]): { currentStreak: number; longestStreak: number } {\n  if (sessions.length === 0) {\n    return { currentStreak: 0, longestStreak: 0 };\n  }\n  \n  // Group sessions by day\n  const focusSessions = sessions.filter(s => s.type === 'focus' && s.completed);\n  const dayMap = new Map<string, boolean>();\n  \n  focusSessions.forEach(session => {\n    const date = new Date(session.startTime);\n    const dayKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    dayMap.set(dayKey, true);\n  });\n  \n  const sortedDays = Array.from(dayMap.keys()).sort();\n  \n  if (sortedDays.length === 0) {\n    return { currentStreak: 0, longestStreak: 0 };\n  }\n  \n  // Calculate current streak (from today backwards)\n  const today = new Date();\n  \n  let currentStreak = 0;\n  let checkDate = new Date(today);\n  \n  while (true) {\n    const checkKey = `${checkDate.getFullYear()}-${String(checkDate.getMonth() + 1).padStart(2, '0')}-${String(checkDate.getDate()).padStart(2, '0')}`;\n    \n    if (dayMap.has(checkKey)) {\n      currentStreak++;\n      checkDate.setDate(checkDate.getDate() - 1);\n    } else {\n      break;\n    }\n  }\n  \n  // Calculate longest streak\n  let longestStreak = 0;\n  let tempStreak = 1;\n  \n  for (let i = 1; i < sortedDays.length; i++) {\n    const prevDate = new Date(sortedDays[i - 1]);\n    const currDate = new Date(sortedDays[i]);\n    \n    const diffDays = Math.floor((currDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) {\n      tempStreak++;\n    } else {\n      longestStreak = Math.max(longestStreak, tempStreak);\n      tempStreak = 1;\n    }\n  }\n  \n  longestStreak = Math.max(longestStreak, tempStreak);\n  \n  return { currentStreak, longestStreak };\n}\n", "import { app, Tray, Menu, nativeImage, BrowserWindow } from 'electron';\nimport path from 'path';\nimport type { AppState } from '@shared/types';\n\nlet tray: Tray | null = null;\nlet mainWindow: BrowserWindow | null = null;\n\nexport function createTray(window: BrowserWindow): Tray {\n  mainWindow = window;\n\n  // Create tray icon using PNG file\n  const icon = createTrayIcon();\n  tray = new Tray(icon);\n\n  tray.setToolTip('Pomodoro Focus');\n  updateTrayMenu('idle');\n\n  // Show/hide window on tray click\n  tray.on('click', () => {\n    if (mainWindow) {\n      if (mainWindow.isVisible()) {\n        mainWindow.hide();\n      } else {\n        mainWindow.show();\n        mainWindow.focus();\n      }\n    }\n  });\n\n  return tray;\n}\n\nexport function updateTrayMenu(timerState: AppState['currentState']): void {\n  if (!tray || !mainWindow) return;\n\n  const contextMenu = Menu.buildFromTemplate([\n    {\n      label: `Status: ${formatState(timerState)}`,\n      enabled: false,\n    },\n    { type: 'separator' },\n    {\n      label: 'Mostrar',\n      click: () => {\n        mainWindow?.show();\n        mainWindow?.focus();\n      },\n    },\n    {\n      label: 'Ocultar',\n      click: () => {\n        mainWindow?.hide();\n      },\n    },\n    { type: 'separator' },\n    {\n      label: 'Sair',\n      click: () => {\n        app.quit();\n      },\n    },\n  ]);\n\n  tray.setContextMenu(contextMenu);\n}\n\nexport function updateTrayTitle(timeLeft: number): void {\n  if (!tray) return;\n\n  const minutes = Math.floor(timeLeft / 1000 / 60);\n  const seconds = Math.floor((timeLeft / 1000) % 60);\n  const timeString = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n\n  // On Windows/Linux, update tooltip; on macOS, update title\n  if (process.platform === 'darwin') {\n    tray.setTitle(timeString);\n  } else {\n    tray.setToolTip(`Pomodoro Focus - ${timeString}`);\n  }\n}\n\nexport function destroyTray(): void {\n  if (tray) {\n    tray.destroy();\n    tray = null;\n  }\n  mainWindow = null;\n}\n\nfunction createTrayIcon(): Electron.NativeImage {\n  // Use PNG icon for better Windows compatibility\n  // Tray icons should be 16x16 or 32x32 on Windows\n  const iconPath = app.isPackaged\n    ? path.join(process.resourcesPath, 'icons', 'app-icon.png')\n    : path.join(__dirname, '../../public/icons/app-icon.png');\n\n  const icon = nativeImage.createFromPath(iconPath);\n  \n  // Resize to tray size (Windows expects 16x16)\n  return icon.resize({ width: 16, height: 16 });\n}\n\nfunction formatState(state: AppState['currentState']): string {\n  switch (state) {\n    case 'idle':\n      return 'Ocioso';\n    case 'focus':\n      return 'Foco';\n    case 'break-short':\n      return 'Pausa Curta';\n    case 'break-long':\n      return 'Pausa Longa';\n    default:\n      return 'Desconhecido';\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_electron", "import_path", "Store", "import_electron", "mainWindow", "mainWindow", "path", "mainWindow", "path"]
}
